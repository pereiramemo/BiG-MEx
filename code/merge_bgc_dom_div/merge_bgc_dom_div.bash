#!/bin/bash -l

set -o pipefail

###############################################################################
# 1. Load general configuration
###############################################################################

source "/software/conf"

if [[ "$?" -ne "0" ]]; then
  echo "Sourcing /software/conf failed"
  exit 1
fi

###############################################################################
# 2. Define help
###############################################################################

show_usage(){
  cat <<EOF
  Usage: run_bgc_dom_div.bash merge <input directory 1>,<input directory 2>,<input directory 3> <output directory> <options>

--help                      print this help
--domain CHAR               name of target domain
--font_size NUM             font size in rarefaction plot (default 10). R parameter
--font_tree_size NUM        plot font size in tree plot (default 1). R parameter
--identity NUM              clustering minimum identity (default 0.7). MMseqs2 cluster parameter 
--num_iter NUM              number of iterations in each random subsampling (default 100)
--only_rep t|f              place only representative cluster domain sequences onto reference tree (default t)
--plot_rare_curve t|f       make rare curve plot (default f)
--plot_height NUM           plot height (default 4). R parameter
--plot_width NUM            plot width (default 8). R parameter
--plot_tree t|f             place sequences onto reference tree and generate plot (default f)
--plot_tree_height NUM      tree plot height (default 12). R parameter
--plot_tree_width NUM       tree plot width (default 14). R parameter
--sample_increment NUM      increment in rarefaction (default 50)
--nslots NUM                number of slots (default 2). MMseqs2 cluster parameter
--verbose t|f               reduced verbose (default t)
--verbose_all t|f           complete verbose (default f)
--overwrite t|t             overwrite current directory (default f)

<input directory 1>,<input directory 2>,<input directory 3> comma-separated list of domain diversity analyses generated by run_bgc_dom_div meta (i.e., output directories)
<output directory> name of the output directory

EOF
}

###############################################################################
# 3. Parse parameters 
###############################################################################

while :; do
  case "${1}" in
#############
  --help) # Call a "show_usage" function to display a synopsis, then exit.
  show_usage
  exit 1;
  ;;
#############
  --input_dirs)
  if [[ -n "${2}" ]]; then
   INPUT_DIRS="${2}"
   shift
  fi
  ;;
  --input_dirs=?*) # Delete everything up to "=" and assign the remainder.
  INPUT_DIRS="${1#*=}"
  ;;
  --input_dirs=) # Handle the empty case
  printf "ERROR: --input_dirs requires a non-empty argument\n" >&2
  exit 1
  ;;
#############
  --identity)
  if [[ -n "${2}" ]]; then
    ID="${2}"
    shift
  fi
  ;;
  --identity=?*)
  ID="${1#*=}"
  ;;
  --identity=)
  printf "--identity: Using default parameter\n" >&2
  ;;
#############
  --domain)
  if [[ -n "${2}" ]]; then
    DOMAIN="${2}"
    shift
  fi
  ;;
  --domain=?*)
  DOMAIN="${1#*=}"
  ;;
  --domain=)
  printf "ERROR: --domain requires a non-empty argument\n" >&2
  exit 1
  ;;
#############
  --font_size)
  if [[ -n "${2}" ]]; then
    FONT_SIZE="${2}"
    shift
  fi
  ;;
  --font_size=?*)
  FONT_SIZE="${1#*=}"
  ;;
  --font_size=)
  printf '--font_size: Using default parameter\n' >&2
  ;;   
#############
  --font_tree_size)
  if [[ -n "${2}" ]]; then
    FONT_TREE_SIZE="${2}"
    shift
  fi
  ;;
  --font_tree_size=?*)
  FONT_TREE_SIZE="${1#*=}" 
  ;;
  --font_tree_size=)
  printf '--font_tree_size: Using default parameter\n' >&2
  ;;    
#############
  --outdir)
  if [[ -n "${2}" ]]; then
    OUTDIR_EXPORT="${2}"
    shift
  fi
  ;;
  --outdir=?*)
  OUTDIR_EXPORT="${1#*=}"
  ;;
  --outdir=)
  printf "ERROR: --outdir requires a non-empty argument\n"  >&2
  exit 1
  ;;
#############
  --only_rep)
  if [[ -n "${2}" ]]; then
    ONLY_REP="${2}"
    shift
  fi
  ;;
  --only_rep=?*)
  ONLY_REP="${1#*=}"
  ;;
  --only_rep=)
  printf '--only_rep: Using default parameter\n' >&2
  ;;
#############
  --num_iter)
  if [[ -n "${2}" ]]; then
    NUM_ITER="${2}"
    shift
  fi
  ;;
  --num_iter=?*)
  NUM_ITER="${1#*=}"
  ;;
  --num_iter=)
  printf '--num_iter: Using default parameter\n' >&2
  ;;
#############
  --sample_increment)
  if [[ -n "${2}" ]]; then
    SAMPLE_INCREMENT="${2}"
    shift
  fi
  ;;
  --sample_increment=?*)
  SAMPLE_INCREMENT="${1#*=}"
  ;;
  --sample_increment=) 
  printf '--sample_increment: Using default parameter\n' >&2
  ;; 
#############
  --plot_rare_curve)
  if [[ -n "${2}" ]]; then
    PLOT_RARE_CURVE="${2}"
    shift
  fi
  ;;
  --plot_rare_curve=?*)
  PLOT_RARE_CURVE="${1#*=}"
  ;;
  --plot_rare_curve=) 
  printf '--plot_rare_curve: Using default parameter\n' >&2
  ;;
#############
  --plot_tree)
  if [[ -n "${2}" ]]; then
    PLOT_TREE="${2}"
    shift
  fi
  ;;
  --plot_tree=?*)
  PLOT_TREE="${1#*=}"
  ;;
  --plot_tree=) 
  printf '--plot_tree: Using default parameter\n' >&2
  ;;     
#############
  --plot_height)
  if [[ -n "${2}" ]]; then
    PLOT_HEIGHT="${2}"
    shift
  fi
  ;;
  --plot_height=?*)
  PLOT_HEIGHT="${1#*=}" 
  ;;
  --plot_height=)
  printf '--plot_height: Using default parameter\n' >&2
  ;;  
#############
  --plot_width)
  if [[ -n "${2}" ]]; then
    PLOT_WIDTH="${2}"
    shift
  fi
  ;;
  --plot_width=?*)
  PLOT_WIDTH="${1#*=}"
  ;;
  --plot_width=)
  printf '--plot_width: Using default parameter\n' >&2
  ;;  
#############
  --plot_tree_height)
  if [[ -n "${2}" ]]; then
    PLOT_TREE_HEIGHT="${2}"
    shift
  fi
  ;;
  --plot_tree_height=?*)
  PLOT_TREE_HEIGHT="${1#*=}" 
  ;;
  --plot_tree_height=) 
  printf '--plot_tree_height: Using default parameter\n' >&2
  ;;  
#############
  --plot_tree_width)
  if [[ -n "${2}" ]]; then
    PLOT_TREE_WIDTH="${2}"
    shift
  fi
  ;;
  --plot_tree_width=?*)
  PLOT_TREE_WIDTH="${1#*=}" 
  ;;
  --plot_tree_width=)
  printf '--plot_tree_width: Using default parameter\n' >&2
  ;;
  #############
  --nslots)
  if [[ -n "${2}" ]]; then
    NSLOTS="${2}"
    shift
  fi
  ;;
  --nslots=?*)
  NSLOTS="${1#*=}" 
  ;;
  --nslots=) 
  printf '--nslots: Using default parameter\n' >&2
  ;;
 ############# 
  --verbose)
  if [[ -n "${2}" ]]; then
    VERBOSE="${2}"
    shift
  fi
  ;;
  --verbose=?*)
  VERBOSE="${1#*=}"
  ;;
  --verbose=)
  printf '--verbose: Using default parameter\n' >&2
  ;;
############# 
  --verbose_all)
  if [[ -n "${2}" ]]; then
    VERBOSE_ALL="${2}"
    shift
  fi
  ;;
  --verbose_all=?*)
  VERBOSE_ALL="${1#*=}"
  ;;
  --verbose_all=)
  printf '--verbose_all: Using default parameter\n' >&2
  ;;  
#############
  --overwrite)
  if [[ -n "${2}" ]]; then
    OVERWRITE="${2}"
    shift
  fi
  ;;
  --overwrite=?*)
  OVERWRITE="${1#*=}"
  ;;
  --overwrite=)
  printf '--overwrite: Using default parameter\n' >&2
  ;;  
#############
  --)       # End of all options.
  shift
  break
  ;;
  -?*)
  printf 'WARN: Unknown argument (ignored): %s\n' "$1" >&2
  ;;
  *) # Default case: If no more options then break out of the loop.
  break
  esac
  shift
done

###############################################################################
# 4. Check mandatory parameters
###############################################################################

for D in $(echo "${INPUT_DIRS}" | tr "," "\n"); do

  if [[ ! -d "${D}" ]]; then
    echo "Failed. Input directory ${D} not found"
    exit 1
  fi    
  
done

if [[ -z "${DOMAIN}" ]]; then
  echo "Failed. Missing target domains (e.g., PKS_KS)"
  exit 1
fi

if [[ -z "${OUTDIR_EXPORT}" ]]; then
 echo "Failed. Missing output directory"
 exit 1;
fi

###############################################################################
# 5. Set defaults and check variables
###############################################################################

if [[ -z "${ID}" ]]; then
  ID="0.7"
fi

if [[ -z "${NUM_ITER}" ]]; then
  NUM_ITER="100"
fi

if [[ -z "${NSLOTS}" ]]; then
  NSLOTS="2"
fi

if [[ -z "${SAMPLE_INCREMENT}" ]]; then
  SAMPLE_INCREMENT="50"
fi

if [[ -z "${FONT_SIZE}" ]]; then
  FONT_SIZE="10"
fi

if [[ -z "${FONT_TREE_SIZE}" ]]; then
  FONT_TREE_SIZE="1"
fi

if [[ -z "${PLOT_HEIGHT}" ]]; then
  PLOT_HEIGHT="4"
fi

if [[ -z "${PLOT_WIDTH}" ]]; then
  PLOT_WIDTH="8"
fi

if [[ -z "${PLOT_TREE_HEIGHT}" ]]; then
  PLOT_TREE_HEIGHT="12"
fi

if [[ -z "${PLOT_TREE_WIDTH}" ]]; then
  PLOT_TREE_WIDTH="14"
fi

if [[ -z "${ONLY_REP}" ]]; then
  ONLY_REP="t"
fi

if [[ -z "${VERBOSE}" ]]; then
  VERBOSE="t"
fi

if [[ -z "${VERBOSE_ALL}" ]]; then
  VERBOSE_ALL="f"
fi

if [[ "${VERBOSE_ALL}" == "t" ]]; then
  VERBOSE="t"
fi

###############################################################################
# 6. Load handleoutput
###############################################################################

source "/software/handleoutput_functions"

if [[ "$?" -ne "0" ]]; then
  echo "Sourcing /software/handleoutput_functions failed"
  exit 1
fi

###############################################################################
# 7. Check output directories
###############################################################################

if [[ -d "${OUTDIR_LOCAL}/${OUTDIR_EXPORT}" ]]; then
  if [[ "${OVERWRITE}" != "t" ]]; then
    echo "${OUTDIR_EXPORT} already exist. Use \"--overwrite t\" to overwrite."
    exit
  fi
  
  if [[ "${OVERWRITE}" == "t" ]]; then
    rm -r "${OUTDIR_LOCAL}/${OUTDIR_EXPORT}"
    if [[ $? -ne "0" ]]; then
      echo "Failed to remove output directory ${OUTDIR_EXPORT}"
      exit 1
    fi  
  fi
fi

###############################################################################
# 8. Define output
###############################################################################

THIS_JOB_TMP_DIR="${OUTDIR_LOCAL}/${OUTDIR_EXPORT}"
NAME="${THIS_JOB_TMP_DIR}/${DOMAIN}"
TMP_NAME="${THIS_JOB_TMP_DIR}/tmp_${DOMAIN}"

mkdir "${THIS_JOB_TMP_DIR}"

if [[ "$?" -ne "0" ]]; then
  echo "Creating ${THIS_JOB_TMP_DIR} failed"
  exit 1
fi

###############################################################################
# 9. Export variables
###############################################################################

ENV="${THIS_JOB_TMP_DIR}/tmp_env"

echo -e "\
DOMAIN=${DOMAIN}
ID=${ID}
INPUT_DIRS=${INPUT_DIRS}
FONT_SIZE=${FONT_SIZE}
FONT_TREE_SIZE=${FONT_TREE_SIZE}
NAME=${NAME}
TMP_NAME=${TMP_NAME}
NSLOTS=${NSLOTS}
NUM_ITER=${NUM_ITER}
ONLY_REP=${ONLY_REP}
THIS_JOB_TMP_DIR=${THIS_JOB_TMP_DIR}
PLOT_TREE=${PLOT_TREE}
PLOT_WIDTH=${PLOT_WIDTH}
PLOT_HEIGHT=${PLOT_HEIGHT}
PLOT_TREE_HEIGHT=${PLOT_TREE_HEIGHT}
PLOT_TREE_WIDTH=${PLOT_TREE_WIDTH}
SAMPLE_INCREMENT=${SAMPLE_INCREMENT}
VERBOSE=${VERBOSE}
VERBOSE_ALL=${VERBOSE_ALL}" > "${ENV}"

###############################################################################
# 10. Concat and add file id to fasta files
###############################################################################

echo \
"#######################################################################
Merging BGC domain diversity analyses: 
$(echo ${INPUT_DIRS} | sed "s/\,/\n/g" | sed "s/\/input\///")
#######################################################################" | handleoutput

echo "Concatenating fasta files" | handleoutput

"${SOFTWARE_DIR}"/1-concat_faa.bash --env "${ENV}" 2>&1 | handleoutput_all

if [[ $? -ne "0" ]]; then
  echo "Concatenating faa files failed (i.e., 1-concat_faa.bash)"
  exit 1
fi

###############################################################################
# 11. Concat and add file id to cluster files
###############################################################################

echo "Concatenating OPU tables" | handleoutput

"${SOFTWARE_DIR}"/2-concat_clust.bash --env "${ENV}" 2>&1 | handleoutput_all

if [[ $? -ne "0" ]]; then
  echo "Concatenating cluster tables failed (i.e., 2-concat_clust.bash)"
  exit 1
fi  

###############################################################################
# 12. Cluster seqs
###############################################################################

echo "Clustering sequences ..." | handleoutput

"${SOFTWARE_DIR}"/3-mmseqs_runner.bash \
--env "${ENV}" \
--tmp_prefix "${TMP_NAME}" \
--tmp_folder "${THIS_JOB_TMP_DIR}"/tmp 2>&1 | handleoutput_all

if [[ $? -ne "0" ]]; then
  echo "Clustering sequences failed (i.e., 3-mmseqs_runner.bash)"
  exit 1
fi

###############################################################################
# 13. Map coverage
###############################################################################

echo "Creating merged OPU coverage table" | handleoutput

"${SOFTWARE_DIR}"/4-map_coverage.bash --env "${ENV}" 2>&1 | handleoutput_all

if [[ "$?" -ne "0" ]]; then
  echo "Creating merged OPU table failed (i.e., 4-map_coverage.bash)"
  exit 1
fi

###############################################################################
# 14. Estimate diversity
###############################################################################

echo "Estimating OPU Shannon diversity" | handleoutput

"${SOFTWARE_DIR}"/5-model_div_plot.bash \
--env "${ENV}" \
--plot_model_points t 2>&1 | handleoutput_all

if [[ "$?" -ne "0" ]]; then
  echo "Computing OPU Shannon diversity failed (i.e., 5-model_div_plot.bash)"
  exit 1
fi

###############################################################################
# 15. Make rarefaction
###############################################################################

echo "Rarefying OPU Shannon diversity ..." | handleoutput
    
if [[ "${PLOT_RARE_CURVE}" == "t" ]]; then

  "${SOFTWARE_DIR}"/6-rare_div_plot.bash \
  --env "${ENV}" \
  --plot_rare_curve t 2>&1 | handleoutput_all

  if [[ "$?" -ne "0" ]]; then
    echo "Rarefying OPU Shannon diversity failed (i.e., 6-rare_div_plot.bash)"
    exit 1
  fi
fi

###############################################################################
# 16. Tree placement and drawing
###############################################################################

if [[ "${PLOT_TREE}" == "t" ]]; then

  echo "Placing sequences onto reference tree and generating figure ..." | handleoutput
  
  if [[ ! -d "${REF_PKG_DIR}/${DOMAIN}.refpkg" ]]; then
  
    echo "No refpkg for ${DOMAIN}. Placement onto reference tree cannot be performed"
    echo "See https://raw.githubusercontent.com/pereiramemo/BiG-MEx/master/data/supplementary_file2.tsv for supported domains"
  
  else
  
    #############################################################################
    # 16.1. Concat cluster2abund.tsv tables
    #############################################################################
    
    "${SOFTWARE_DIR}"/7-concat_cluster2abund.bash \
     --env "${ENV}" 2>&1 | handleoutput_all
  
    if [[ "$?" -ne "0" ]]; then
      echo "Concatenating cluster2abund tables failed (i.e., 7-concat_cluster2abund.bash)"
      exit 1
    fi
  
    if [[ "${ONLY_REP}" == "t" ]]; then
  
      ###########################################################################
      # 16.2. Extract repseqs
      ###########################################################################
      
      "${SOFTWARE_DIR}"/8-extract_only_rep_seqs.bash \
      --env "${ENV}" 2>&1 | handleoutput_all
      
      if [[ "$?" -ne "0" ]]; then
        echo "Extracting representative sequences failed (i.e., 8-extract_only_rep_seqs.bash)"
        exit 1
      fi

      TREE_INPUT_SEQ="${TMP_NAME}_onlyrep_subseqs.faa"
      TREE_CLUST_ABUND="${TMP_NAME}_onlyrep_cluster2abund.tsv"

    else

      ###########################################################################
      # 16.3. Rename, with no repseq extraction
      ###########################################################################
      
      TREE_INPUT_SEQ="${TMP_NAME}_all.faa"
      TREE_CLUST_ABUND="${TMP_NAME}_concat_cluster2abund.tsv"

    fi
  
    #############################################################################
    # 16.4. Place seqs
    #############################################################################
  
    "${SOFTWARE_DIR}"/9-tree_pplacer.bash \
    --env "${ENV}" \
    --input "${TREE_INPUT_SEQ}" 2>&1 | handleoutput_all
      
    if [[ "$?" -ne "0" ]]; then
      echo "Placing sequences onto reference tree failed (i.e., 9-tree_pplacer.bash)"
      exit 1
    fi
  
    #############################################################################
    # 16.5. Make tree figure
    #############################################################################

    "${SOFTWARE_DIR}"/10-tree_drawer.bash \
    --env "${ENV}" \
    --abund_table "${TREE_CLUST_ABUND}" 2>&1 | handleoutput_all
      
    if [[ "$?" -ne "0" ]]; then
      echo "Creating tree figure failed (i.e., 10-tree_drawer.bash)"
      exit 1
    fi
  fi
fi

###############################################################################
# 17. Clean
###############################################################################

rm -r "${THIS_JOB_TMP_DIR}"/tmp*

if [[ "$?" -ne "0" ]]; then
  echo "Removing temporary files failed"
  exit 1
fi

###############################################################################
# 18. Exit
###############################################################################

echo \
"#######################################################################
Merging BGC domain diversity analyses is finished
#######################################################################" | \
handleoutput

###############################################################################
# Move output for export
###############################################################################

# rsync -a --delete "${THIS_JOB_TMP_DIR}" "${OUTDIR_LOCAL}"

