#!/bin/bash -l

set -o pipefail

###############################################################################
# 1. Load general configuration
###############################################################################

source "/software/conf"

if [[ "$?" -ne "0" ]]; then
  echo "Sourcing /software/conf failed"
  exit 1
fi

###############################################################################
# 2. Define help
###############################################################################

show_usage(){
  cat <<EOF
  Usage: run_bgc_dom_div.bash meta <annotation file> <sequence files> \
<output directory> <options>

--help                      print this help
--blast t|f                 run blast against reference database (default f)
--coverage t|f              use coverage to compute diversity (default f) 
--domains CHAR              target domain names: comma-separated list
--font_size NUM             histogram plot font size (default 5). R parameter
--font_tree_size NUM        tree plot font size (default 1). R parameter
--identity NUM              clustering minimum identity (default 0.7). MMseqs2 parameter
--nslots NUM                number of slots (default 2). metaSPAdes, FragGeneScan, hmmsearch, MMseqs2, BWA-MEM, and Samtools parameter
--num_iter NUM              number of iterations to estimate diversity distribution (default 100)
--only_rep t|f              place only representative cluster domain sequences onto reference tree (default t)
--output_assembly t|f       keep all assembly output files (default f)
--overwrite t|f             overwrite current directory (default f)
--plot_height NUM           histogram plot height (default 3). R parameter
--plot_hist t|f             plot histogram of Shannon diversity index distribution (default f)
--plot_tree t|f             place sequences onto reference tree and generate plot
--plot_tree_height NUM      tree plot height (default 12). R parameter
--plot_tree_width NUM       tree plot width (default 14). R parameter
--plot_width NUM            histogram plot width (default 3). R parameter
--verbose t|f               reduced verbose (default t)
--verbose_all t|f           complete verbose (default f)

<annotation file> BGC domain annotation file generated by run_bgc_profiler.bash (i.e,. *_bgc_dom.gz)
<sequence files> R1, R2, and/or SR sequence files (fasta/fastq) used to annotate the BGC domains with run_bgc_profiler.bash
<output directory> name of the output directory

EOF
}

###############################################################################
# 3. Parse parameters
###############################################################################

while :; do
  case "${1}" in
#############
  --help) # Call a "show_usage" function to display a synopsis, then exit.
  show_usage
  exit 1;
  ;;
#############
  --blast)
  if [[ -n "${2}" ]]; then
    BLAST="${2}"
    shift
  fi
  ;;
  --blast=?*)
  BLAST="${1#*=}" # Delete everything up to "=" and assign the remainder.
  ;;
  --blast=) # Handle the empty case
  printf '--blast: Using default parameter\n' >&2
  ;;
#############
  --coverage)
  if [[ -n "${2}" ]]; then
    COVERAGE="${2}"
    shift
  fi
  ;;
  --coverage=?*)
  COVERAGE="${1#*=}"
  ;;
  --coverage=)
  printf '--coverage: Using default parameter\n'  >&2
  ;;   
#############
  --domains)
  if [[ -n "${2}" ]]; then
    DOMAINS="${2}"
    shift
  fi
  ;;
  --domains=?*)
  DOMAINS="${1#*=}"
  ;;
  --domains=)
  printf "ERROR: --domains requires a non-empty argument.\n"  >&2
  exit 1
  ;; 
 #############
  --font_size)
   if [[ -n "${2}" ]]; then
     FONT_SIZE="${2}"
     shift
   fi
  ;;
  --font_size=?*)
  FONT_SIZE="${1#*=}"
  ;;
  --font_size=)
  printf '--font_size: Using default parameter\n' >&2
  ;;
#############
  --font_tree_size)
  if [[ -n "${2}" ]]; then
    FONT_TREE_SIZE="${2}"
    shift
  fi
  ;;
  --font_tree_size=?*)
  FONT_TREE_SIZE="${1#*=}" 
  ;;
  --font_tree_size=)
  printf '--font_tree_size: Using default parameter\n' >&2
  ;;  
#############
  --input)
  if [[ -n "${2}" ]]; then
    INPUT="${2}"
    shift
  fi
  ;;
  --input=?*)
  INPUT="${1#*=}"
  ;;
  --input=)
  printf "ERROR: --input requires a non-empty argument.\n"  >&2
  exit 1
  ;;
#############
  --identity)
  if [[ -n "${2}" ]]; then
    ID="${2}"
    shift
  fi
  ;;
  --identity=?*)
  ID="${1#*=}"
  ;;
  --identity=)
  printf '--identity: Using default parameter\n'  >&2
  ;;
 #############
  --num_iter)
  if [[ -n "${2}" ]]; then
    NUM_ITER="${2}"
    shift
  fi
  ;;
  --num_iter=?*)
  NUM_ITER="${1#*=}"
  ;;
  --num_iter=) 
  printf '--num_iter: Using default parameter\n' >&2
  ;; 
#############
  --output_assembly)
  if [[ -n "${2}" ]]; then
    OUTPUT_ASSEM="${2}"
    shift
  fi
  ;;
  --output_assembly=?*)
  OUTPUT_ASSEM="${1#*=}"
  ;;
  --output_assembly=)
  printf '--output_assembly: Using default parameter\n' >&2
  ;;  
#############
  --only_rep)
  if [[ -n "${2}" ]]; then
    ONLY_REP="${2}"
    shift
  fi
  ;;
  --only_rep=?*)
  ONLY_REP="${1#*=}"
  ;;
  --only_rep=)
  printf '--only_rep: Using default parameter\n' >&2
  ;;
#############
  --outdir)
  if [[ -n "${2}" ]]; then
    OUTDIR_EXPORT="${2}"
    shift
  fi
  ;;
  --outdir=?*)
  OUTDIR_EXPORT="${1#*=}"
  ;;
  --outdir=)
  printf "ERROR: --outdir requires a non-empty argument\n" >&2
  ;;
#############
  --plot_hist)
  if [[ -n "${2}" ]]; then
    PLOT_HIST="${2}"
    shift
  fi
  ;;
  --plot_hist=?*)
  PLOT_HIST="${1#*=}"
  ;;
  --plot_hist=)
  printf '--plot_hist: Using default parameter\n' >&2
  ;;  
#############
  --plot_tree)
  if [[ -n "${2}" ]]; then
    PLOT_TREE="${2}"
    shift
  fi
  ;;
  --plot_tree=?*)
  PLOT_TREE="${1#*=}"
  ;;
  --plot_tree=)
  printf '--plot_tree: Using default parameter\n' >&2
  ;;  
#############
  --plot_width)
  if [[ -n "${2}" ]]; then
    PLOT_WIDTH="${2}"
    shift
  fi
  ;;
  --plot_width=?*)
  PLOT_WIDTH="${1#*=}"
  ;;
  --plot_width=)
  printf '--plot_width: Using default parameter\n' >&2
  ;;  
#############
  --plot_height)
  if [[ -n "${2}" ]]; then
    PLOT_HEIGHT="${2}"
    shift
  fi
  ;;
  --plot_height=?*)
  PLOT_HEIGHT="${1#*=}"
  ;;
  --plot_height=)
  printf '--plot_height: Using default parameter\n' >&2
  ;;  
#############
  --plot_tree_height)
  if [[ -n "${2}" ]]; then
    PLOT_TREE_HEIGHT="${2}"
    shift
  fi
  ;;
  --plot_tree_height=?*)
  PLOT_TREE_HEIGHT="${1#*=}"
  ;;
  --plot_tree_height=)
  printf '--plot_tree_height: Using default parameter\n' >&2
  ;;  
#############
  --plot_tree_width)
  if [[ -n "${2}" ]]; then
    PLOT_TREE_WIDTH="${2}"
    shift
  fi
  ;;
  --plot_tree_width=?*)
  PLOT_TREE_WIDTH="${1#*=}"
  ;;
  --plot_tree_width=)
  printf '--plot_tree_width: Using default parameter\n' >&2
  ;;  
#############
  --reads1)
  if [[ -n "${2}" ]]; then
    R1="${2}"
    shift
  fi
  ;;
  --reads1=?*)
  R1="${1#*=}"
  ;;
  --reads1=)
  printf "ERROR: --reads1 requires a non-empty argument\n"  >&2
  exit 1
  ;;
#############
  --reads2)
  if [[ -n "${2}" ]]; then
    R2="${2}"
    shift
  fi
  ;;
  --reads2=?*)
  R2="${1#*=}"
  ;;
  --reads2=)
  printf "ERROR: --reads2 requires a non-empty argument\n"  >&2
  exit 1
  ;;
#############
  --single_reads)
  if [[ -n "${2}" ]]; then
    SR="${2}"
    shift
  fi
  ;;
  --single_reads=?*)
  SR="${1#*=}"
  ;;
  --single_reads=) 
  printf "ERROR: --single_reads requires a non-empty argument\n"  >&2
  exit 1
  ;;
#############
  --nslots)
  if [[ -n "${2}" ]]; then
    NSLOTS="${2}"
    shift
  fi
  ;;
  --nslots=?*)
  NSLOTS="${1#*=}"
  ;;
  --nslots=) 
  printf '--nslots: Using default parameter\n' >&2
  ;;
 #############
  --verbose)
  if [[ -n "${2}" ]]; then
    VERBOSE="${2}"
    shift
  fi
  ;;
  --verbose=?*)
  VERBOSE="${1#*=}"
  ;;
  --verbose=)
  printf '--verbose: Using default parameter\n' >&2
  ;;
#############
  --verbose_all)
  if [[ -n "${2}" ]]; then
    VERBOSE_ALL="${2}"
    shift
  fi
  ;;
  --verbose_all=?*)
  VERBOSE_ALL="${1#*=}"
  ;;
  --verbose_all=)
  printf '--verbose_all: Using default parameter\n' >&2
  ;;  
#############
  --overwrite)
  if [[ -n "${2}" ]]; then
    OVERWRITE="${2}"
    shift
  fi
  ;;
  --overwrite=?*)
  OVERWRITE="${1#*=}"
  ;;
  --overwrite=) 
  printf '--overwrite: Using default parameter\n' >&2
  ;;    
############
  --)         # End of all options.
  shift
  break
  ;;
  -?*)
  printf 'WARN: Unknown argument (ignored): %s\n' "$1" >&2
  ;;
  *) # Default case: If no more arguments then break out of the loop.
  break
  esac
  shift
done

###############################################################################
# 4. Check mandatory parameters
###############################################################################

if [[ -z "${DOMAINS}" ]]; then
 echo "Failed. Missing target domains (e.g., PKS_KS)"
 exit 1;
fi

if [[ ! -f "${INPUT}" ]]; then
 echo "Failed. Missing annotation file (i.e., uproc output)"
 exit 1;
fi

if [[ -z "${OUTDIR_EXPORT}" ]]; then
 echo "Failed. Missing output directory"
 exit 1;
fi

if [[ -z "${R1}" ]] && [[ -z "${SR}" ]]; then
 echo "Failed. Missing input sequences"
 exit 1;
fi

###############################################################################
# 5. Define defaults
###############################################################################

if [[ -z "${BLAST}" ]]; then
  BLAST="f"
fi

if [[ -z "${COVERAGE}" ]]; then
  COVERAGE="f"
fi

if [[ -z "${ID}" ]]; then
  ID="0.7"
fi

if [[ -z "${FONT_SIZE}" ]]; then
  FONT_SIZE="5"
fi

if [[ -z "${FONT_TREE_SIZE}" ]]; then
  FONT_TREE_SIZE="1"
fi

if [[ -z "${NUM_ITER}" ]]; then
  NUM_ITER="100"
fi

if [[ -z "${NSLOTS}" ]]; then
  NSLOTS="2"
fi

if [[ -z "${ONLY_REP}" ]]; then
  ONLY_REP="t"
fi

if [[ -z "${OUTPUT_ASSEM}" ]]; then
  OUTPUT_ASSEM="f"
fi

if [[ -z "${OVERWRITE}" ]]; then
  OVERWRITE="f"
fi

if [[ -z "${PLOT_HEIGHT}" ]]; then
  PLOT_HEIGHT="3"
fi  

if [[ -z "${PLOT_HIST}" ]]; then
  PLOT_HIST="f"
fi

if [[ -z "${PLOT_WIDTH}" ]]; then
  PLOT_WIDTH="3"
fi  

if [[ -z "${PLOT_TREE_HEIGHT}" ]]; then
  PLOT_TREE_HEIGHT="12"
fi

if [[ -z "${PLOT_TREE_WIDTH}" ]]; then
  PLOT_TREE_WIDTH="14"
fi

if [[ -z "${PLOT_TREE}" ]]; then
  PLOT_TREE="f"
fi

if [[ -z "${VERBOSE}" ]]; then
  VERBOSE="t"
fi

if [[ -z "${VERBOSE_ALL}" ]]; then
  VERBOSE_ALL="f"
fi

if [[ "${VERBOSE_ALL}" == "t" ]]; then
  VERBOSE="t"
fi

###############################################################################
# 6. Load handleoutput
###############################################################################

source "/software/handleoutput_functions"

if [[ "$?" -ne "0" ]]; then
  echo "Sourcing /software/handleoutput_functions failed"
  exit 1
fi

###############################################################################
# 7. Check output directories
###############################################################################

if [[ -d "${OUTDIR_LOCAL}/${OUTDIR_EXPORT}" ]]; then
  if [[ "${OVERWRITE}" != "t" ]]; then
    echo "${OUTDIR_EXPORT} already exists. Use \"--overwrite t\" to overwrite"
    exit 0
  fi
  
  if [[ "${OVERWRITE}" == "t" ]]; then
    rm -r "${OUTDIR_LOCAL}/${OUTDIR_EXPORT}"
    if [[ "$?" -ne "0" ]]; then
      echo "Failed to remove output directory ${OUTDIR_EXPORT}"
      exit 1
    fi  
  fi
  
fi

###############################################################################
# 8. Create output directories
###############################################################################

THIS_JOB_TMP_DIR="${OUTDIR_LOCAL}/${OUTDIR_EXPORT}"
mkdir -p "${THIS_JOB_TMP_DIR}"

if [[ "$?" -ne "0" ]]; then
  echo "Creating ${THIS_JOB_TMP_DIR} failed"
  exit 1
fi

###############################################################################
# 9. Define output vars
###############################################################################

DOM_ALL_TMP="${THIS_JOB_TMP_DIR}/dom_all.list"
ALL_HEADERS="${THIS_JOB_TMP_DIR}/all_headers.list"
ALL_HEADERS_CHECK="${THIS_JOB_TMP_DIR}/all_headers_check.list"
INPUT_SUBSET="${THIS_JOB_TMP_DIR}/uproc_outptu_subset.list"
INPUT_SUBSET_BKUP="${THIS_JOB_TMP_DIR}/uproc_outptu_subset_bkup.list"
R1_REDU="${THIS_JOB_TMP_DIR}/redu_r1.fasta"
R2_REDU="${THIS_JOB_TMP_DIR}/redu_r2.fasta"
SR_REDU="${THIS_JOB_TMP_DIR}/redu_sr.fasta"

###############################################################################
# 10. Extract domains from uproc output
###############################################################################

echo "${DOMAINS}" | sed 's/\,/\n/g' > "${DOM_ALL_TMP}"
zcat "${INPUT}" | egrep -w -f "${DOM_ALL_TMP}" | sort | uniq > "${INPUT_SUBSET}"

if [[ "$?" -ne "0" ]]; then
  echo "Generating ${INPUT_SUBSET} failed"
  exit 1
fi  

###############################################################################
# 11. Check (and fix) ORF header format
###############################################################################

head "${INPUT_SUBSET}" | cut -f2 -d"," > "${ALL_HEADERS_CHECK}"

if [[ "$?" -ne "0" ]]; then
  echo "Generating ${ALL_HEADERS_CHECK} failed"
  exit 1
fi  

if [[ -n $(egrep "_[0-9]+_[0-9]+_[+,-]$" "${ALL_HEADERS_CHECK}") ]]; then

  awk 'BEGIN {FS=","; OFS=","} \
      {
         sub("_[0-9]+_[0-9]+_[+,-]$","",$2); 
         print $0
      }' "${INPUT_SUBSET}" > "${INPUT_SUBSET_BKUP}"
      
  if [[ "$?" -ne "0" ]]; then
    echo "Generating ${INPUT_SUBSET_BKUP} failed"
    exit 1
  fi  
      
  mv "${INPUT_SUBSET_BKUP}" "${INPUT_SUBSET}"
fi

###############################################################################
# 12. Check (and fix) old fastq header format
###############################################################################

if [[ -n $(egrep "\/[1,2]$" "${ALL_HEADERS_CHECK}") ]]; then

  awk 'BEGIN {FS=","; OFS=","} \
      { sub("\/[1,2]$","",$2); print $0}' "${INPUT_SUBSET}" > \
      "${INPUT_SUBSET_BKUP}"
      
  if [[ "$?" -ne "0" ]]; then
    echo "Generating ${INPUT_SUBSET_BKUP} failed"
    exit 1
  fi      
      
  mv "${INPUT_SUBSET_BKUP}" "${INPUT_SUBSET}"
  
fi

###############################################################################
# 13. Check number of sequences found
###############################################################################

echo "Counting and filtering annotated sequences" | handleoutput

cut -f2 -d"," "${INPUT_SUBSET}" | sort | uniq > "${ALL_HEADERS}"
NSEQ=$(wc -l "${ALL_HEADERS}" | cut -f1 -d" ")

if [[ "$?" -ne "0" ]]; then
  echo "Generating ${NSEQ} variable failed"
  exit 1
fi

if [[ "${NSEQ}" -eq "0" ]]; then
  echo "Warning: No reads found for ${DOMAINS}. run_bgc_dom_div meta cannot run"
  exit 0
fi

###############################################################################
# 14. Reduce fasta file to speed up following analyses
###############################################################################

if [[ -n "${R1}" ]] && [[ -n "${R2}" ]]; then

  "${filterbyname}" \
  in="${R1}" \
  in2="${R2}" \
  out="${R1_REDU}" \
  out2="${R2_REDU}" \
  names="${ALL_HEADERS}" \
  include=t \
  overwrite=t 2>&1 | handleoutput_all

  if [[ "$?" -ne "0" ]]; then
    echo "${DOMAINS}: filterbyname failed (R1 and R2)"
    exit 1
  fi
  
fi  
  
if [[ -n "${SR}" ]]; then
  
  "${filterbyname}" \
  in="${SR}" \
  out="${SR_REDU}" \
  names="${ALL_HEADERS}" \
  include=t \
  overwrite=t 2>&1 | handleoutput_all
  
  if [[ "$?" -ne "0" ]]; then
    echo "${DOMAINS}: filterbyname failed (SR)"
    exit 1
  fi
    
fi

###############################################################################
# 15. Export variables
###############################################################################

ENV="${THIS_JOB_TMP_DIR}/tmp_env"

echo -e "\
BLAST=${BLAST}
COVERAGE=${COVERAGE}
DOM_ALL_TMP=${DOM_ALL_TMP}
DIV_DIST=${DIV_DIST}
ID=${ID}
INPUT_SUBSET=${INPUT_SUBSET}
FONT_SIZE=${FONT_SIZE}
FONT_TREE_SIZE=${FONT_TREE_SIZE}
NSLOTS=${NSLOTS}
NUM_ITER=${NUM_ITER}
OUTPUT_ASSEM=${OUTPUT_ASSEM}
ONLY_REP=${ONLY_REP}
THIS_JOB_TMP_DIR=${THIS_JOB_TMP_DIR}
PLOT_HIST=${PLOT_HIST}
PLOT_TREE=${PLOT_TREE}
PLOT_WIDTH=${PLOT_WIDTH}
PLOT_HEIGHT=${PLOT_HEIGHT}
PLOT_TREE_HEIGHT=${PLOT_TREE_HEIGHT}
PLOT_TREE_WIDTH=${PLOT_TREE_WIDTH}
R1_REDU=${R1_REDU}
R2_REDU=${R2_REDU}
SR_REDU=${SR_REDU}
VERBOSE=${VERBOSE}
VERBOSE_ALL=${VERBOSE_ALL}" > "${ENV}"

###############################################################################
# 16. Extract, assembly, cluster, and place onto ref tree (for each domain)
###############################################################################

for DOMAIN in $(cat "${DOM_ALL_TMP}"); do

echo \
"#######################################################################
Analyzing the ${DOMAIN} domain 
#######################################################################" | handleoutput
   
  "${SOFTWARE_DIR}"/0-extract_assembly_cluster_and_place_wrap.bash \
  --domain "${DOMAIN}" \
  --env "${ENV}"
  
  if [[ $? -ne "0" ]]; then
    echo "Extract, assembly, cluster, and place failed (i.e., 0-extract_assembly_cluster_and_place_wrap.bash)"
    exit 1
  fi  
   
done

###############################################################################
# 17. Clean
###############################################################################

echo "Cleaning temporary files" | handleoutput

rm -r "${THIS_JOB_TMP_DIR}"/tmp*
rm -r "${THIS_JOB_TMP_DIR}"/*.headers
rm -r "${ALL_HEADERS}"
rm -r "${ALL_HEADERS_CHECK}"
rm -r "${DOM_ALL_TMP}"
rm -r "${INPUT_SUBSET}"

if [[ -f "${R1_REDU}" ]]; then
  rm -r "${R1_REDU}"
  rm -r "${R2_REDU}"
fi
  
if [[ -f "${SR_REDU}" ]]; then
 rm -r "${SR_REDU}"
fi

###############################################################################
# 18. Exit
###############################################################################

echo \
"#######################################################################
BGC domain diversity analysis is finished
#######################################################################" | handleoutput

###############################################################################
# Move output for export
###############################################################################

# rsync -a --delete "${THIS_JOB_TMP_DIR}" "${OUTDIR_LOCAL}"
